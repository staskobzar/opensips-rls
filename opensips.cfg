#
# $Id$
#
# OpenSIPS residential configuration script
#     by OpenSIPS Solutions <team@opensips-solutions.com>
#
# This script was generated via "make menuconfig", from
#   the "Residential" scenario.
# You can enable / disable more features / functionalities by
#   re-generating the scenario with different options.#
#
# Please refer to the Core CookBook at:
#      http://www.opensips.org/Resources/DocsCookbooks
# for a explanation of possible statements, functions and parameters.
#


####### Global Parameters #########

debug=3
log_stderror=no
log_facility=LOG_LOCAL5

fork=yes
children=4

/* uncomment the next line to enable the auto temporary blacklisting of 
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns 
   lookup failures (default disabled) */
#dns_try_ipv6=yes

/* comment the next line to enable the auto discovery of local aliases
   based on revers DNS on IPs */
auto_aliases=no

listen=udp:eth0:5060   # CUSTOMIZE ME

disable_tcp=yes

####### Modules Section ########

#set module path
mpath="/opt/opensips/lib64/opensips/modules/"

loadmodule "signaling.so"
loadmodule "sl.so"
loadmodule "tm.so"
loadmodule "rr.so"
loadmodule "maxfwd.so"
loadmodule "sipmsgops.so"
loadmodule "mi_fifo.so"
loadmodule "uri.so"
loadmodule "dialog.so"
loadmodule "db_mysql.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "auth.so"
loadmodule "auth_db.so"

# presence
loadmodule "xcap.so"
loadmodule "presence.so"
loadmodule "presence_xml.so"
loadmodule "presence_mwi.so"
loadmodule "pua.so"
loadmodule "rls.so"

#### Transaction Module
modparam("tm", "fr_timer", 5)
modparam("tm", "fr_inv_timer", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
modparam("rr", "append_fromtag", 0)

#### FIFO Management Interface
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### URI module
modparam("uri", "use_uri_table", 0)
modparam("uri", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips") 

#### USeR LOCation module
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "db_mode",   2)
modparam("usrloc", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips") 

#### REGISTRAR module
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")

#### AUTHentication modules
modparam("auth_db", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips")

#### PRESENCE modules
modparam("xcap|presence", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips")
modparam("presence_xml", "force_active", 1)
modparam("presence", "server_address", "sip:presence@192.168.1.135:5060")

#### Presence uaser agent
modparam("pua", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips")


#### XCAP
modparam("xcap", "integrated_xcap_server", 1)

#### RLS
modparam("rls", "server_address", "sip:rls@192.168.1.135:5060")
modparam("rls", "to_presence_code", 10)
modparam("rls", "rls_event", "presence")

####### Routing Logic ########

# main request routing logic
route{
	
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if (has_totag()) {
    route(sequential_request);
	}

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans())
			t_relay();
		exit;
	}

	t_check_trans();

	if( is_method("INVITE") ){
		if(from_uri==myself) {
			# authenticate if from local subscriber
			# authenticate all initial non-REGISTER request that pretend to be
			# generated by local subscriber (domain from FROM URI is local)
			if (!proxy_authorize("", "subscriber")) {
				proxy_challenge("", "0");
				exit;
			}
			if (!db_check_from()) {
				sl_send_reply("403","Forbidden auth ID");
				exit;
			}
		
			consume_credentials();
			# caller authenticated
			
		} else {
			# if caller is not local, then called number must be local
			if (!uri==myself) {
				send_reply("403","Rely forbidden");
				exit;
			}
		}
	}

	# preloaded route checking
	if (loose_route()) {
		xlog("L_ERR",
		"Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
		if (!is_method("ACK"))
			sl_send_reply("403","Preload Route denied");
		exit;
	}

	# record routing
	if (!is_method("REGISTER|MESSAGE"))
		record_route();

	# account only INVITEs
	if (is_method("INVITE")){
		setflag(ACC_DO); # do accounting
	}

	if(!uri==myself){
		append_hf("P-hint: outbound\r\n"); 
		route(relay);
	}

	# requests for my domain
	
	if( is_method("PUBLISH|SUBSCRIBE|NOTIFY"))
			route(handle_presence);

	if(is_method("REGISTER")) {
		# authenticate the REGISTER requests
		if (!www_authorize("", "subscriber")) {
			www_challenge("", "0");
			exit;
		}
		
		if (!db_check_to()) {
			sl_send_reply("403","Forbidden auth ID");
			exit;
		}

		if (!save("location")){
			sl_reply_error();
      exit;
    }
		exit;
	}

	if ($rU==NULL) {
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}

	# do lookup with method filtering
	if (!lookup("location","m")) {
		if (!db_does_uri_exist()) {
			send_reply("420","Bad Extension");
			exit;
		}
		
		t_newtran();
		t_reply("404", "Not Found");
		exit;
	} 

	# when routing via usrloc, log the missed calls also
	setflag(ACC_MISSED);
	route(relay);
}


route[relay] {
	# for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {
		t_on_branch("per_branch_ops");
		t_on_reply("handle_nat");
		t_on_failure("missed_call");
	}

	if (!t_relay()) {
		send_reply("500","Internal Error");
	};
	exit;
}


# Presence route
route[handle_presence] {
	if (!t_newtran()) {
		sl_reply_error();
		exit;
	}

	if(is_method("PUBLISH")) {
    xlog("L_INFO", "$ci|$rm| Publishing event: $hdr(Event) from $fu to $to R-URI $ru");
		handle_publish();
	}
	else
	if( is_method("SUBSCRIBE")) {
    rls_handle_subscribe();
    if($retcode==10){
      xlog("L_INFO", "$ci|$rm| RLS was not detected, trying handle_subscribe()");
      handle_subscribe(); # Handle SUBSCRIBE method
    }else{
      xlog("L_INFO", "$ci|$rm| Processed by RLS, returned $retcode");
    }
	}
  else
  if(is_method("NOTIFY")){
    xlog("L_INFO", "$ci|$rm| Signaling To: $tU ,From: $fU ,RURI: $ru , Event: $hdr(Event)");
    rls_handle_notify();
    switch($retcode) {
      case 1:
        xlog("L_INFO","$ci|$rm| Notify was inside a dialog that was recognized by the RLS server and was processed successfully.");
        break;
      case 2:
        xlog("L_INFO", "$ci|$rm| Notify did not belog to a dialog initiated by the RLS server.");
        break;
      default:
        xlog("L_INFO", "$ci|$rm| RLS error occurred during processing: $retcode");
    }
  }

	exit;
}

route[sequential_request]{
  # sequential request withing a dialog should
  # take the path determined by record-routing
  if (loose_route()) {
    
    if (is_method("BYE")) {
      setflag(ACC_DO); # do accounting ...
      setflag(ACC_FAILED); # ... even if the transaction fails
    } else if (is_method("INVITE")) {
      # even if in most of the cases is useless, do RR for
      # re-INVITEs alos, as some buggy clients do change route set
      # during the dialog.
      record_route();
    }

    # route it out to whatever destination was set by loose_route()
    # in $du (destination URI).
    route(relay);
  } else {
    if (is_method("SUBSCRIBE") && $rd == "192.168.1.135:5060") {
      # in-dialog subscribe requests
      route(handle_presence);
      exit;
    }
    if ( is_method("ACK") ) {
      if ( t_check_trans() ) {
        # non loose-route, but stateful ACK; must be an ACK after 
        # a 487 or e.g. 404 from upstream server
        t_relay();
        exit;
      } else {
        # ACK without matching transaction ->
        # ignore and discard
        exit;
      }
    }
    sl_send_reply("404","Not here");
  }
  exit;
}

branch_route[per_branch_ops] {
	xlog("L_INFO", "$ci|$rm| New branch at $ru");
}


onreply_route[handle_nat] {
	
	xlog("L_INFO", "$ci|$rm| Incoming reply code $T_reply_code");
}


failure_route[missed_call] {
	if (t_was_cancelled()) {
		exit;
	}
	xlog("L_INFO", "$ci|$rm| Failure code $T_reply_code");
}

/* vim: set filetype=openser fen fdm=marker : */
